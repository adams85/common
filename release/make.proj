<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="12.0" DefaultTargets="Make">
  <PropertyGroup>
    <Git>git.exe</Git>
    <VsTest>vstest.console.exe</VsTest>
    <NuGet>$(MSBuildProjectDirectory)\nuget.exe</NuGet>
    <TestSolutionPath>$(MSBuildProjectDirectory)\..\test</TestSolutionPath>
    <TestSolution>$(TestSolutionPath)\Karambolo.Common.Test.sln</TestSolution>
    <SolutionPath>$(MSBuildProjectDirectory)\..\source</SolutionPath>
    <Solution>$(SolutionPath)\Karambolo.Common.sln</Solution>
    <AssemblyInfoPath>$(SolutionPath)\Karambolo.Common\Properties\AssemblyInfo.cs</AssemblyInfoPath>
    <NetstdProjPath>$(SolutionPath)\Karambolo.Common\Properties\AssemblyInfo.props</NetstdProjPath>
    <NuspecPath>$(MSBuildProjectDirectory)\package.nuspec</NuspecPath>
  </PropertyGroup>

  <ItemGroup>
    <TestProject Include="$(TestSolutionPath)\Karambolo.Common.Test\bin\Release\Karambolo.Common.Test.dll" />
  </ItemGroup>
  
  <Target Name="GetVersion" Condition="$(TagVersion) == '' Or $(Revision) == ''">
    <!-- checking active branch -->
    <Exec Command="&quot;$(Git)&quot; branch | find &quot;* (HEAD detached at &quot;" IgnoreExitCode="true">
      <Output TaskParameter="ExitCode" PropertyName="BranchExitCode"></Output>
    </Exec>
    <Error Condition="$(BranchExitCode) != 0" Text="Repository not checked out at a tag." />

    <!-- checking dirty files-->
    <Exec Command="&quot;$(Git)&quot; diff --shortstat 2> nul | find /v /c &quot;&quot;" ConsoleToMSBuild="true" IgnoreExitCode="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="CheckChangedOutput" />
    </Exec>
    <Error Condition="$([System.Int32]::Parse($(CheckChangedOutput))) != 0" Text="Working copy has changed files." />

    <Exec Command="&quot;$(Git)&quot; status --porcelain 2> nul | find /v /c &quot;&quot;" ConsoleToMSBuild="true" IgnoreExitCode="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="CheckUnversionedOutput" />
    </Exec>
    <Error Condition="$([System.Int32]::Parse('$(CheckUnversionedOutput)')) != 0" Text="Working copy has unversioned files." />

    <!-- getting tag version -->
    <Exec Command="&quot;$(Git)&quot; describe --tags --long" ConsoleToMSBuild="true" IgnoreExitCode="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="TagVersion" />
      <Output TaskParameter="ExitCode" PropertyName="TagExitCode"></Output>
    </Exec>
    <Error Condition="$(TagExitCode) != 0" Text="Branch is not tagged." />

    <!-- getting revision -->
    <Exec Command="&quot;$(Git)&quot; log --oneline 2> nul | find /v /c &quot;&quot;" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="Revision" />
    </Exec>
  </Target>

  <Target Name="RunTests">
    <!-- build -->
    <MSBuild Projects="$(TestSolution)" Properties="Configuration=Release;Platform=Any CPU" />

    <!-- run tests -->
    <Exec Command="&quot;$(VsTest)&quot; &quot;%(TestProject.Identity)&quot;" />
  </Target>

  <Target Name="Make" DependsOnTargets="RunTests;GetVersion">
    <!-- setting version -->
    <UpdateVersion TagVersion="$(TagVersion)" Revision="$(Revision)"
                   AssemblyInfoPath="$(AssemblyInfoPath)" NetstdProjPath="$(NetstdProjPath)" NuspecPath="$(NuspecPath)" />

    <!-- build -->
    <MSBuild Projects="$(Solution)" Targets="Restore;Rebuild" Properties="Configuration=Release;Platform=Any CPU" />

    <!-- create nuget package -->
    <DownloadNuGet Condition="!Exists('$(NuGet)')" OutputFilename="$(NuGet)" />
    <Exec Command="&quot;$(NuGet)&quot; pack &quot;$(NuspecPath)&quot;" />
    
    <OnError ExecuteTargets="Cleanup" />
  </Target>

  <Target Name="Cleanup" AfterTargets="Make">
    <RestoreVersion AssemblyInfoPath="$(AssemblyInfoPath)" NetstdProjPath="$(NetstdProjPath)" NuspecPath="$(NuspecPath)" />
  </Target>

  <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
      <ParameterGroup>
          <OutputFilename ParameterType="System.String" Required="true" />
      </ParameterGroup>
      <Task>
          <Reference Include="System.Core" />
          <Using Namespace="System" />
          <Using Namespace="System.IO" />
          <Using Namespace="System.Net" />
          <Using Namespace="Microsoft.Build.Framework" />
          <Using Namespace="Microsoft.Build.Utilities" />
          <Code Type="Fragment" Language="cs">
              <![CDATA[
              try {
                  OutputFilename = Path.GetFullPath(OutputFilename);

                  Log.LogMessage("Downloading latest version of NuGet.exe...");
                  WebClient webClient = new WebClient();
                  webClient.DownloadFile("https://dist.nuget.org/win-x86-commandline/v4.3.0/nuget.exe", OutputFilename);

                  return true;
              }
              catch (Exception ex) {
                  Log.LogErrorFromException(ex);
                  return false;
              }
          ]]>
          </Code>
      </Task>
  </UsingTask>

  <UsingTask TaskName="UpdateVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll" >
    <ParameterGroup>
      <TagVersion ParameterType="System.String" Required="true" />
      <Revision ParameterType="System.String" Required="true" />
      <AssemblyInfoPath ParameterType="System.String" Required="true" />
      <NetstdProjPath ParameterType="System.String" Required="true" />
      <NuspecPath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <!--<Reference Include="" />-->
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />      
      <Code Type="Fragment" Language="cs">
<![CDATA[
// building version

var match = Regex.Match(TagVersion, @"^(\d+)\.(\d+).(\d+)-(\d+)-\w+$");
if (!match.Success)
{
    Log.LogError("Tag name must match the pattern '{major-version}.{minor-version}.{patch-number}'.");
    return false;
}

if (int.Parse(match.Groups[4].Value) != 0)
{
    Log.LogError("Tag must not contain changes.");
    return false;
}

var major = int.Parse(match.Groups[1].Value);
var minor = int.Parse(match.Groups[2].Value);
var patch = int.Parse(match.Groups[3].Value);
var revision = int.Parse(Revision);

var assemblyVersion = string.Format("{0}.0", major);
var assemblyFileVersion = string.Format("{0}.{1}.{2}.{3}", major, minor, patch, revision);
var nugetVersion = string.Format("{0}.{1}.{2}", major, minor, patch);

// updating files
Action<string, string, MatchEvaluator> update = (path, regex, replacer) =>
{
    var backupPath = path + ".bak";
    if (File.Exists(backupPath))
        File.Copy(backupPath, path, true);
    else
        File.Copy(path, backupPath);

    var fileContent = File.ReadAllText(path);
    fileContent = Regex.Replace(fileContent, regex, replacer, RegexOptions.Multiline);
    File.WriteAllText(path, fileContent);
};

update(AssemblyInfoPath,
  @"^(?<start>\s*\[\s*assembly\s*:\s*(?<attr>AssemblyVersion|AssemblyFileVersion)\(\s*"").+(?<end>""\s*\)\s*\]\s*)$",
    m => m.Groups["start"] + (m.Groups["attr"].Value == "AssemblyVersion" ? assemblyVersion : assemblyFileVersion) + m.Groups["end"]);

update(NetstdProjPath,
  @"^(?<start>\s*<(?<tag>Version|FileVersion)>).+(?<end></\k<tag>>\s*)$",
    m => m.Groups["start"] + (m.Groups["tag"].Value == "Version" ? assemblyVersion : assemblyFileVersion) + m.Groups["end"]);

update(NuspecPath,
  @"^(?<start>\s*<(?<tag>version)>).+(?<end></\k<tag>>\s*)$",
    m => m.Groups["start"] + nugetVersion + m.Groups["end"]);
]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="RestoreVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll" >
    <ParameterGroup>
      <AssemblyInfoPath ParameterType="System.String" Required="true" />
      <NetstdProjPath ParameterType="System.String" Required="true" />
      <NuspecPath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
<![CDATA[
Action<string> restore = path =>
{
    var backupPath = path + ".bak";
    if (File.Exists(backupPath))
        File.Copy(backupPath, path, true);

    File.Delete(backupPath);
};

restore(AssemblyInfoPath);
restore(NetstdProjPath);
restore(NuspecPath);
]]>
      </Code>
    </Task>
  </UsingTask>  
</Project>